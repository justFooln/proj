package com.kineticsnw;

import  java.io.*;
import  java.net.*;
import  java.util.*;
import  javax.swing.*;
import  java.awt.*;
import  java.awt.event.*;

public class SimpleChatClient {

  JTextArea incomingText;
  JTextField outgoingText;
  BufferedReader readerBuff;
  PrintWriter writerToPrint;
  Socket sockOnServer;

  /*
  * Member class to catch the event generated by the send button in the UI
  */
  public class SendButtonListener implements ActionListener {
    public void actionPerformed( ActionEvent e ) {
      try {
        writerToPrint.println( outgoingText.getText() );
        writerToPrint.flush();
        System.out.println("Client sent: " + outgoingText.getText());
      } catch(Exception ex) {
        ex.printStackTrace();
      }

      outgoingText.setText("");
      outgoingText.requestFocus();

    } // end, actionPerformed override
  } // end SendButtonListener

  /*
  * Member class to run in separate thread. Catches chat messages from server
  */
  public class IncomingReader implements Runnable {
    public void run() {
      String message;
      try {
        while ((message = readerBuff.readLine()) !=null ) {
          System.out.println( "Client: read" + message );
          incomingText.append(message + "\n");
        } // end while
      } catch (Exception ex) {
        ex.printStackTrace();
      } // end try/catch
    } // end run()
  } // end IncomingReader

  public static void main(String[] args) {

    SimpleChatClient chatClient= new SimpleChatClient();

    chatClient.go();

  }

  /*
  * Member function for housekeeping: calls to set-up UI, network, and thread.
  */
  public void go() {
    // Define UI elements
    JFrame frameChat = new JFrame("Super Simple Chat Client");
    JPanel mainPanel = new JPanel();

    incomingText = new JTextArea( 15, 50 );
    incomingText.setLineWrap( true );
    incomingText.setWrapStyleWord( true );
    incomingText.setEditable( false );
    JScrollPane qScroller = new JScrollPane( incomingText );
    qScroller.setVerticalScrollBarPolicy( ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS );
    qScroller.setHorizontalScrollBarPolicy( ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER );

    outgoingText = new JTextField( 20 );
    JButton sendButton = new JButton( "Send" );
    sendButton.addActionListener( new SendButtonListener() );

    // Add to main panel
    mainPanel.add(qScroller);
    mainPanel.add( outgoingText );
    mainPanel.add( sendButton );

    // Connect to socket & stream readers
    setUpNetworking();

    // Kickoff the thread to read incoming messages
    Thread readerThread = new Thread(new IncomingReader() );
    readerThread.start();

    // Build and expose the UI frame
    frameChat.getContentPane().add(BorderLayout.CENTER, mainPanel);
    frameChat.setSize(800, 500);
    frameChat.setVisible( true );

  } // end go()

  /*
  * Member function to set-up the network connection to the server
  */
  private void setUpNetworking()  {
    try {
      sockOnServer = new Socket( "127.0.0.1", 5000 );
      InputStreamReader streamReader = new InputStreamReader( sockOnServer.getInputStream() );
      readerBuff = new BufferedReader( streamReader );
      writerToPrint = new PrintWriter( sockOnServer.getOutputStream() );
      System.out.println( "Client: Networking Established" );

    } catch(IOException ex) {
      ex.printStackTrace();
    }
  } //  end setUpNetworking


}
